services:
  app:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
    container_name: express-app
    restart: unless-stopped
    working_dir: /usr/src/app
    env_file:
      - .env
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - .:/usr/src/app:cached
      - /usr/src/app/node_modules
    #depends_on:
      #mongo:
      #  condition: service_healthy
    networks:
      - app-net
    command: npm run dev

  #mongo:
  #  image: mongo:7.0.25-jammy
  #  container_name: mongodb
  #  restart: unless-stopped
  #  env_file:
  #    - .env
  #  ports:
  #    - "127.0.0.1:27017:27017"
  #  volumes:
  #    - mongo-data:/data/db
  #    - ./docker/mongo/init:/docker-entrypoint-initdb.d:ro
  #  command: ["mongod", "--bind_ip", "0.0.0.0"]
  #  healthcheck:
  #    test: [ "CMD-SHELL", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh --host mongo --port 27017 -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin --quiet" ]
  #    interval: 10s
  #    timeout: 5s
  #    retries: 5
  #  networks:
  #    - app-net

  #mongo-express:
  #  image: mongo-express:1.0.2
  #  container_name: mongo-express
  #  restart: unless-stopped
  #  env_file:
  #    - .env
  #  environment:
  #    - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
  #    - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #    - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
  #    - ME_CONFIG_MONGODB_SERVER=${MONGO_INITDB_ROOT_DATABASE}
  #  ports:
  #    - "127.0.0.1:8081:8081"
  #  depends_on:
  #    mongo:
  #      condition: service_healthy
  #  networks:
  #    - app-net
  #  profiles: ["dev"]

#volumes:
#  mongo-data:

networks:
  app-net:
    driver: bridge