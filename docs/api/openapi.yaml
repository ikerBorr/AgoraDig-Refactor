openapi: 3.0.0
info:
  title: AgoraDig API
  version: 1.0.0
  description: |
      > **Comprehensive REST API reference for AgoraDig backend services**

      **Base URL:** `http://localhost/api`  
      **Version:** `1.0.0`  
      **Content-Type:** `application/json`
    
      ---

      ## Overview

      The AgoraDig API follows **RESTful principles** and uses **JSON** for both request and response payloads.  
      Each endpoint returns a **standardized response envelope** containing `code`, `message`, and optional `data`.

      Designed for consistency, predictability, and security:
      - Input validation with [Zod](https://zod.dev/)
      - Consistent domain & application error mapping
      - Idempotent, non-enumerative registration flow
      - JWT-based session authentication with secure httpOnly cookies

servers:
  - url: https://localhost/api
    description: Developing
tags:
  - name: Auth
    description: Authentication & Registration

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      operationId: post-auth-login
      description: |
        Validates credentials and issues an **access token** (also set as an httpOnly cookie).
        Returns minimal, non-sensitive user credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              Example:
                value:
                  identifier: "john.doe@example.com"
                  password: "Password123!"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: httpOnly session cookie with the access token (e.g., `session=...; HttpOnly; Secure; SameSite=Lax`)
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessEnvelope"
              examples:
                Success:
                  value:
                    code: USER_LOGGED_IN
                    message: Login successful
                    data:
                      id: "7b1c7ec2-0c1a-4d2a-8ad0-9c7a3a4d7b9d"
                      identifier: "john.doe@example.com"
                      roles: ["user"]
                      banned: false
                      verified: true
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                InvalidCredentials:
                  value:
                    code: INVALID_CREDENTIALS
                    message: "Invalid identifier or password"
        "403":
          description: User banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                Banned:
                  value:
                    code: USER_BANNED
                    message: "User is banned"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                Throttled:
                  value:
                    code: RATE_LIMIT_EXCEEDED
                    message: "Too many attempts. Please try again later."
        "500":
          $ref: "#/components/responses/InternalError"
      security: []  # public endpoint (no auth required)

  /auth/register:
    post:
      tags: [Auth]
      summary: Register
      operationId: post-auth-register
      description: |
        Starts the registration flow.  
        Always returns a neutral response instructing the client to **check email**.  
        Backend may send activation for new users or magic link for existing ones.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            examples:
              Example:
                value:
                  identifier: "john.doe@example.com"
                  password: "Password123!"
      responses:
        "201":
          description: Registration accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationSuccessEnvelope"
              examples:
                Accepted:
                  value:
                    code: USER_REGISTERED
                    message: "User registered successfully"
                    data:
                      nextAction: "check_email"
                      flowId: "reg_5e1f6b13-3a60-4f0a-9e2e-4b93f0b9b5a1"
                      expiresAt: 1730000000000
        "400":
          $ref: "#/components/responses/ValidationError"
        "409":
          description: Conflict (only for strict conflict mode; typically unused in non-enumerative flows)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                AlreadyExists:
                  value:
                    code: ALREADY_EXISTS
                    message: "Identifier already registered"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                Throttled:
                  value:
                    code: RATE_LIMIT_EXCEEDED
                    message: "Too many attempts. Please try again later."
        "500":
          $ref: "#/components/responses/InternalError"
      security: []  # public endpoint (no auth required)

components:
  securitySchemes:
    SessionCookie:
      type: apiKey
      in: cookie
      name: session
      description: httpOnly session cookie set on successful login

  schemas:
    # ----- Requests -----
    LoginRequest:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          minLength: 1
          description: Email or username
        password:
          type: string
          minLength: 1
          description: Plain password (validated server-side)
    RegisterRequest:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          minLength: 1
          description: Email or username to register
        password:
          type: string
          minLength: 1
          description: Plain password (validated server-side)

    # ----- Domain-ish DTOs (minimal, non-sensitive) -----
    AuthUserCredentials:
      type: object
      description: Minimal, non-sensitive user representation
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        identifier:
          type: string
          description: Email/username
        roles:
          type: array
          items:
            type: string
          description: Assigned roles
        banned:
          type: boolean
          description: Whether the user is banned
        verified:
          type: boolean
          description: Whether the user has verified their email/identifier
      required: [id, identifier, banned, verified]

    RegistrationResult:
      type: object
      description: Neutral result for registration flows
      properties:
        nextAction:
          type: string
          enum: [check_email]
          description: Next client step
        flowId:
          type: string
          description: Opaque registration flow identifier (not the user ID)
        expiresAt:
          type: integer
          format: int64
          description: Expiration time as Unix epoch milliseconds
      required: [nextAction, flowId, expiresAt]

    # ----- Envelopes -----
    LoginSuccessEnvelope:
      type: object
      properties:
        code:
          type: string
          enum: [USER_LOGGED_IN]
        message:
          type: string
        data:
          $ref: "#/components/schemas/AuthUserCredentials"
      required: [code, message, data]

    RegistrationSuccessEnvelope:
      type: object
      properties:
        code:
          type: string
          enum: [USER_REGISTERED]
        message:
          type: string
        data:
          $ref: "#/components/schemas/RegistrationResult"
      required: [code, message, data]

    ErrorEnvelope:
      type: object
      properties:
        code:
          type: string
          description: Application/Domain error code
        message:
          type: string
        details:
          description: Optional structured details (e.g., validation issues)
      required: [code, message]

  responses:
    ValidationError:
      description: Validation error (Zod)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"
          examples:
            ValidationError:
              value:
                code: VALIDATION_ERROR
                message:
                  fieldErrors:
                    identifier: ["Identifier is required"]
                    password: ["Password is required"]
    InternalError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnvelope"
          examples:
            Internal:
              value:
                code: INTERNAL_ERROR
                message: "An unexpected error occurred"