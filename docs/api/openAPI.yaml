openapi: 3.0.3

info:
  title: AgoraDig API
  version: 1.0.0
  description: |
    ## Overview
    
    **AgoraDig** (Ágora Digital) is a modern discussion forum platform inspired by the ancient Greek *Agora* — the center of social and political life where citizens gathered to discuss ideas and exchange knowledge. Just as the historical Agora served as a public space for dialogue and debate, AgoraDig aims to create a vibrant digital community where users can:
    
    - Register and build their user profiles
    - Create discussion threads on diverse topics
    - Publish comments and engage in conversations
    - Answer questions and help other community members
    - Share knowledge and perspectives
    
    This API provides the backend infrastructure for the AgoraDig platform.
    
    ### Current Status
    
    The API is currently in active development. The authentication module is being built first to establish the architectural patterns and security foundation that will be replicated across all future endpoints.

  contact:
    name: API Support
    url: https://github.com/CPV05/AgoraDig
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/v1
    description: Local development server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticates a user using their identifier (email or username) and password.
        
        ### Supported Identifiers
        
        - **Email**: Valid email address (validated by Email Value Object)
        - **Username**: Alphanumeric username (validated by Username Value Object)
        
        ### Security Considerations
        
        - Password is never returned in response
        - Failed attempts should be rate-limited
        - Generic error messages prevent username enumeration
      operationId: loginUser
      requestBody:
        required: true
        description: User credentials for authentication
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              emailLogin:
                summary: Login with Email
                description: Authenticate using a valid email address
                value:
                  identifier: john.doe@example.com
                  password: Str0ngP@ss!
              usernameLogin:
                summary: Login with Username
                description: Authenticate using a username
                value:
                  identifier: john_doe
                  password: Str0ngP@ss!
              minimalPassword:
                summary: Minimum Password Requirements
                description: Password meeting minimum security requirements
                value:
                  identifier: user@domain.com
                  password: Pass123!

      responses:
        "200":
          description: |
            **Authentication Successful**
            
            User has been successfully authenticated. Returns a minimal user data transfer object containing the UUID and identifier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
              examples:
                emailSuccess:
                  summary: Email Login Success
                  value:
                    uuid: 2b7e2b65-9c9f-4f22-8f7d-8f6f7e5b6f11
                    identifier: john.doe@example.com
                usernameSuccess:
                  summary: Username Login Success
                  value:
                    uuid: 8f3a1c2d-5e9b-4a7f-9d2c-1b4e6f8a0c3d
                    identifier: john_doe

        "400":
          description: |
            **Bad Request - Schema Validation Error**
            
            The request body failed validation against the Zod schema. This occurs at the schema layer before reaching application logic.
            
            **Common Causes:**
            - Missing required fields (`identifier` or `password`)
            - Invalid data types (e.g., number instead of string)
            - Malformed JSON body
            - Empty strings where values are required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              examples:
                missingIdentifier:
                  summary: Missing Identifier Field
                  value:
                    code: VALIDATION_ERROR
                    message:
                      - code: invalid_type
                        path: ["identifier"]
                        message: Required
                invalidType:
                  summary: Invalid Data Type
                  value:
                    code: VALIDATION_ERROR
                    message:
                      - code: invalid_type
                        path: ["identifier"]
                        message: Expected string, received number
                multipleErrors:
                  summary: Multiple Validation Errors
                  value:
                    code: VALIDATION_ERROR
                    message:
                      - code: invalid_type
                        path: ["identifier"]
                        message: Required
                      - code: invalid_type
                        path: ["password"]
                        message: Required

        "401":
          description: |
            **Unauthorized - Invalid Credentials**
            
            Authentication failed due to invalid credentials. This error is raised by the application layer when the provided identifier or password does not match any valid user account.
            
            **Common Causes:**
            - Incorrect password
            - Non-existent user account
            - Typo in email or username
            
            **Security Note:** The response is intentionally generic to prevent user enumeration attacks.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidCredentials:
                  summary: Authentication Failed
                  value:
                    code: INVALID_CREDENTIALS
                    message: Invalid credentials

        "409":
          description: |
            **Conflict - Application Policy Violation**
            
            The request conflicts with the current state of the application or violates a business rule. This error is raised by the application layer when domain policies prevent the operation.
            
            **Common Scenarios:**
            - User account has been banned or suspended
            - Account locked due to too many failed login attempts
            - Account pending email verification
            - User in a state that prevents authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                userBanned:
                  summary: Banned User Account
                  value:
                    code: USER_BANNED
                    message: User has been banned
                accountLocked:
                  summary: Account Temporarily Locked
                  value:
                    code: ACCOUNT_LOCKED
                    message: Account temporarily locked due to multiple failed login attempts
                pendingVerification:
                  summary: Email Verification Required
                  value:
                    code: EMAIL_NOT_VERIFIED
                    message: Please verify your email address before logging in

        "422":
          description: |
            **Unprocessable Entity - Domain Validation Error**
            
            The request failed domain-level validation rules enforced by Value Objects. This occurs when the data violates business constraints defined in the domain layer.
            
            **Common Scenarios:**
            - Invalid email format (fails Email Value Object validation)
            - Invalid username format or length
            - Password does not meet complexity requirements
            - Domain-specific business rules violated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidEmailTLD:
                  summary: Invalid Email TLD
                  value:
                    code: EMAIL_TLD_INVALID
                    message: Top-level domain must be at least 2 letters
                invalidEmailFormat:
                  summary: Malformed Email
                  value:
                    code: EMAIL_FORMAT_INVALID
                    message: Invalid email format
                passwordTooShort:
                  summary: Password Length Error
                  value:
                    code: PASSWORD_TOO_SHORT
                    message: Password must be at least 8 characters long
                usernameInvalid:
                  summary: Invalid Username Format
                  value:
                    code: USERNAME_INVALID
                    message: Username must contain only alphanumeric characters

        "500":
          description: |
            **Internal Server Error**
            
            An unexpected error occurred on the server. This is a catch-all for unhandled exceptions that escaped the normal error handling flow.
            
            **Common Causes:**
            - Database connection failure
            - External service timeout
            - Unhandled exception in business logic
            - Infrastructure issues
            
            **Note:** These errors are logged for investigation and should not occur in normal operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                genericError:
                  summary: Generic Server Error
                  value:
                    code: INTERNAL_SERVER_ERROR
                    message: An unexpected error occurred. Please try again later
                databaseError:
                  summary: Database Connection Error
                  value:
                    code: DATABASE_ERROR
                    message: Unable to connect to database

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          minLength: 1
          maxLength: 255
          description: |
            User identifier, which can be either:
            - **Email address**: Must be a valid email format (e.g., user@example.com)
            - **Username**: Alphanumeric string meeting username requirements
            
            The system automatically detects the type and validates accordingly using domain Value Objects.
          example: john.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: |
            User's plaintext password. This will be verified against the stored hash.
            
            **Security Notes:**
            - Password is transmitted over HTTPS only
            - Never stored in plaintext
            - Hashed using secure algorithms (bcrypt/argon2)
            - Must meet domain-defined complexity requirements
          example: Str0ngP@ss!
      example:
        identifier: john.doe@example.com
        password: Str0ngP@ss!

    LoginResponse:
      type: object
      required:
        - uuid
        - identifier
      properties:
        uuid:
          type: string
          format: uuid
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: |
            Unique identifier for the authenticated user (UUID v4 format).
            
            This value should be stored securely and used for subsequent authenticated requests.
          example: 2b7e2b65-9c9f-4f22-8f7d-8f6f7e5b6f11
        identifier:
          type: string
          description: |
            Echoes back the identifier used for authentication. This can be either the email address or username that was provided in the request.
            
            Useful for confirmation and display purposes in the client application.
          example: john.doe@example.com
      example:
        uuid: 2b7e2b65-9c9f-4f22-8f7d-8f6f7e5b6f11
        identifier: john.doe@example.com

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          oneOf:
            - type: string
              description: Application or domain error code (e.g., INVALID_CREDENTIALS)
            - type: integer
              description: HTTP status code for infrastructure errors
          description: |
            Stable error code that can be used for programmatic error handling.
            
            **Types:**
            - **String codes**: Application and domain errors (e.g., `INVALID_CREDENTIALS`, `USER_BANNED`)
            - **Integer codes**: Infrastructure errors (typically HTTP status codes like `500`)
            
            These codes should be used by client applications for error handling logic rather than parsing error messages.
          example: INVALID_CREDENTIALS
        message:
          type: string
          description: |
            Human-readable error message providing details about what went wrong.
            
            **Guidelines:**
            - User-facing and localization-friendly
            - Does not expose sensitive system information
            - Provides actionable feedback when possible
          example: Invalid credentials
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of when the error occurred
          example: "2025-10-08T14:30:00Z"
        path:
          type: string
          description: API endpoint path where the error occurred
          example: /auth/login
      example:
        code: INVALID_CREDENTIALS
        message: Invalid credentials
        timestamp: "2025-10-08T14:30:00Z"
        path: /auth/login

    ValidationErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
          description: Fixed error code indicating schema validation failure
          example: VALIDATION_ERROR
        message:
          type: array
          description: |
            Array of Zod validation issues. Each issue represents a specific validation failure in the request body.
            
            This detailed error information helps clients understand exactly what needs to be corrected.
          items:
            type: object
            required:
              - code
              - path
              - message
            properties:
              code:
                type: string
                description: Zod-specific validation error code
                example: invalid_type
              path:
                type: array
                items:
                  type: string
                description: JSON path to the field that failed validation
                example: ["identifier"]
              message:
                type: string
                description: Human-readable description of the validation error
                example: Expected string, received null
              expected:
                type: string
                description: Expected data type or format
                example: string
              received:
                type: string
                description: Actual data type or format received
                example: "null"
            additionalProperties: true
          minItems: 1
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of when the validation error occurred
          example: "2025-10-08T14:30:00Z"
      example:
        code: VALIDATION_ERROR
        message:
          - code: invalid_type
            path: ["identifier"]
            message: Required
            expected: string
            received: undefined
        timestamp: "2025-10-08T14:30:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT bearer token authentication for protected endpoints.
        
        **Usage:** Include the token in the Authorization header:
        ```
        Authorization: Bearer <token>
        ```

  responses:
    UnauthorizedError:
      description: Authentication credentials are missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            code: UNAUTHORIZED
            message: Authentication required

    ForbiddenError:
      description: The authenticated user does not have permission to access this resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            code: FORBIDDEN
            message: Insufficient permissions

    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            code: NOT_FOUND
            message: Resource not found

    RateLimitError:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            code: RATE_LIMIT_EXCEEDED
            message: Too many requests. Please try again later

  parameters:
    AcceptLanguageHeader:
      name: Accept-Language
      in: header
      description: Preferred language for error messages
      schema:
        type: string
        default: en-US
      example: en-US